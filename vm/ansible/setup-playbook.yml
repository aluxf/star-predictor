- hosts: all
  tasks:
   - name: Generate hosts file
     lineinfile: dest=/etc/hosts
                 regexp='.*{{ item }}$'
                 line="{{ hostvars[item].ansible_default_ipv4.address }} {{item}}"
                 state=present            
     when: hostvars[item].ansible_default_ipv4.address is defined
     with_items: "{{groups['all']}}"
     become: true
  
   #- name: Set hostname
   #  hostname: name="{{inventory_hostname}}"
   #  become: true
  
   - name: apt update
     apt: update_cache=yes upgrade=dist
     become: true
    
   - name: Copy git .ssh key from host to target
     copy:
       src: /.ssh/git-key
       dest: ~/.ssh/git-key
       mode: 0600
     become: true
  
   - name: Add host to known hosts
     known_hosts:
       path: ~/.ssh/known_hosts
       name: github.com
       key: "{{ lookup('pipe', 'ssh-keyscan github.com') }}"
     become: true

   - name: Download git repository
     become: true
     git:
      repo: 'git@github.com:aluxf/star-predictor.git'
      dest: /model_serving
      key_file: ~/.ssh/git-key
      update: yes
      force: yes

   - name: Change ownership of a directory
     become: true
     file:
      path: /technical-training
      state: directory
      recurse: yes
      owner: appuser
      group: appuser
  
  # Install Docker
   - name: Add Docker repository key
     apt_key:
      url: 
       https://download.docker.com/linux/ubuntu/gpg
      state: present
     become: true

   - name: Add Docker repository 
     command: add-apt-repository -y "deb [arch=amd64] https://download.docker.com/linux/ubuntu focal stable"
     become: true

   - name: apt update
     apt: update_cache=yes upgrade=dist
     become: true
  
   # Workaround pip issue with MTU mismatch, see: https://github.com/docker/docker.github.io/pull/9249/files
   # MTU for SNIC is 1450, Docker default is 1500. Override so that Docker matches the host.
   # We create the config file before installing, to avoid any need to restart the docker daemon.
   - name: Create Ansible docker config directory.
     become: true
     file:
       path: "/etc/docker"
       state: directory

   - name: Create Ansible docker file to configure Docker MTU to match SNIC for pip issue
     become: true
     copy:
       dest: "/etc/docker/daemon.json"
       content: |
        {
          "mtu": 1450
        }

   - name: Install Docker  
     apt: pkg=docker-ce state=present update_cache=true allow_unauthenticated=yes
     become: true


- hosts: prodserver
  
  tasks:  
   - name: Extra packages
     apt: pkg={{item}} state=latest update_cache=true 
     with_items:
      - apt-transport-https
      - ca-certificates
      - curl
      - software-properties-common
     become: true

   - name: apt update
     apt: update_cache=yes upgrade=dist
     become: true
   
   - name: Create incoming deployment git repo
     shell: |
        mkdir incoming_deploy
        cd incoming_deploy
        git init --bare
     args:
        chdir: /home/appuser
        creates: /home/appuser/incoming_deploy

   - name: Git hooks
     shell: |
        cp /model_serving/prod/post-receive hooks/post-receive
        chmod +x hooks/post-receive
     args:
        chdir: /home/appuser/incoming_deploy
     become: true

   - name: Set owner of incoming/outgoing
     become: true
     shell: |
        chown -R appuser:appuser /home/appuser/incoming_deploy
  

   - name: Running containers
     become: true
     shell: docker compose up -d 
     args: 
      chdir: /model_serving/prod
     # Temporary while prod has no application
     ignore_errors: yes

- hosts: devserver

  tasks:
    - name: apt update
      apt: update_cache=yes upgrade=dist
      become: true
    
    - name: Copy cluster-key to dev
      copy:
        src: /.ssh/cluster-key
        dest: ~/.ssh/cluster-key
    
    - name: Copy cluster-launcher.yml to dev
      copy:
        src: cluster-launcher.yml
        dest: /model_serving/dev/cluster-launcher.yml

    - name: Git user and email
      shell: |
        git config --global user.name dev-server
        git config --global user.email dev-server@example.com
      args:
        creates: ~/.gitconfig

    - name: Git remote
      shell: |
        mkdir outgoing_deploy
        cd outgoing_deploy
        git init
        git remote add prod appuser@{{hostvars['prodserver']['ansible_host']}}:/home/appuser/incoming_deploy
      args:
       chdir: /home/appuser
       creates: /home/appuser/outgoing_deploy
    
    - name: Create incoming deployment git repo
      shell: |
        mkdir incoming_deploy
        cd incoming_deploy
        git init --bare
        cp /model_serving/dev/post-receive hooks/post-receive
      args:
        chdir: /home/appuser
        creates: /home/appuser/incoming_deploy

    - name: Allow execution of git hook
      become: true
      shell: |
        chmod +x hooks/post-receive
      args:
        chdir: /home/appuser/incoming_deploy
    
    - name: Set owner of incoming/outgoing
      become: true
      shell: |
        chown -R appuser:appuser /home/appuser/incoming_deploy
        chown -R appuser:appuser /home/appuser/outgoing_deploy
  
    - name: Running containers
      become: true
      shell: docker compose up -d 
      args: 
       chdir: /model_serving/dev

